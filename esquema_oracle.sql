-- =====================================================================
-- Script de Creación de Tablas para el Sistema Académico
-- Base de Datos: Oracle
-- =====================================================================

-- --- Tablas de Catálogos y Entidades Independientes ---

CREATE TABLE Facultad (
    id_facultad NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100) NOT NULL UNIQUE,
    CONSTRAINT chk_facultad_nombre CHECK (LENGTH(nombre) > 2)
);
COMMENT ON TABLE Facultad IS 'Almacena las facultades de la universidad.';

CREATE TABLE Sede (
    id_sede NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100) NOT NULL UNIQUE,
    direccion VARCHAR2(255),
    CONSTRAINT chk_sede_nombre CHECK (LENGTH(nombre) > 2)
);
COMMENT ON TABLE Sede IS 'Almacena las sedes físicas de la universidad.';

CREATE TABLE RiesgoAcademico (
    id_riesgo NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(50) NOT NULL UNIQUE,
    descripcion VARCHAR2(255),
    max_creditos NUMBER NOT NULL,
    CONSTRAINT chk_riesgo_creditos CHECK (max_creditos BETWEEN 0 AND 21)
);
COMMENT ON TABLE RiesgoAcademico IS 'Define los niveles de riesgo académico y el límite de créditos asociado.';

CREATE TABLE TipoAsignatura (
    id_tipo_asignatura NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(50) NOT NULL UNIQUE
);
COMMENT ON TABLE TipoAsignatura IS 'Catálogo para los tipos de asignatura (básica, disciplinar, electiva, etc.).';

CREATE TABLE Periodo (
    id_periodo NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(20) NOT NULL UNIQUE,
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE NOT NULL,
    CONSTRAINT chk_periodo_fechas CHECK (fecha_fin > fecha_inicio)
);
COMMENT ON TABLE Periodo IS 'Define los periodos académicos (semestres).';

CREATE TABLE DiaSemana (
    id_dia NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(20) NOT NULL UNIQUE
);
COMMENT ON TABLE DiaSemana IS 'Catálogo de días de la semana. Ej: 1=LUNES, 2=MARTES...';

CREATE TABLE Horario (
    id_horario NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_dia NUMBER NOT NULL,
    hora_inicio DATE NOT NULL, -- solo componente horario (fecha dummy)
    hora_fin DATE NOT NULL,
    CONSTRAINT fk_horario_dia FOREIGN KEY (id_dia) REFERENCES DiaSemana(id_dia),
    CONSTRAINT chk_horario_horas CHECK (hora_fin > hora_inicio)
);
COMMENT ON TABLE Horario IS 'Bloques de horario para las clases. dia referenciado en DiaSemana.';

-- --- Entidades Principales (con dependencias) ---

CREATE TABLE Programa (
    id_programa NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    codigo_programa VARCHAR2(20) NOT NULL UNIQUE,
    nombre VARCHAR2(100) NOT NULL,
    total_creditos NUMBER NOT NULL,
    id_facultad NUMBER NOT NULL,
    CONSTRAINT fk_programa_facultad FOREIGN KEY (id_facultad) REFERENCES Facultad(id_facultad),
    CONSTRAINT chk_programa_creditos CHECK (total_creditos > 0)
);
COMMENT ON TABLE Programa IS 'Almacena los programas académicos ofrecidos.';

CREATE TABLE Estudiante (
    id_estudiante NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    codigo_matricula VARCHAR2(20) NOT NULL UNIQUE,
    nombre VARCHAR2(100) NOT NULL,
    documento_identidad VARCHAR2(20) NOT NULL UNIQUE,
    correo_institucional VARCHAR2(100) NOT NULL UNIQUE,
    telefono VARCHAR2(15),
    id_programa NUMBER NOT NULL,
    id_sede NUMBER NOT NULL,
    id_riesgo NUMBER DEFAULT 1 NOT NULL, -- Asumimos un riesgo por defecto (Sin Riesgo)
    CONSTRAINT fk_estudiante_programa FOREIGN KEY (id_programa) REFERENCES Programa(id_programa),
    CONSTRAINT fk_estudiante_sede FOREIGN KEY (id_sede) REFERENCES Sede(id_sede),
    CONSTRAINT fk_estudiante_riesgo FOREIGN KEY (id_riesgo) REFERENCES RiesgoAcademico(id_riesgo)
);
COMMENT ON TABLE Estudiante IS 'Información de los estudiantes matriculados.';

CREATE TABLE Docente (
    id_docente NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100) NOT NULL,
    documento_identidad VARCHAR2(20) NOT NULL UNIQUE,
    correo_institucional VARCHAR2(100) NOT NULL UNIQUE,
    telefono VARCHAR2(15)
);
COMMENT ON TABLE Docente IS 'Información de los docentes.';

CREATE TABLE InfoAcademicaDocente (
    id_info_academica NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_docente NUMBER NOT NULL,
    institucion VARCHAR2(100) NOT NULL,
    nivel_estudio VARCHAR2(50) NOT NULL,
    CONSTRAINT fk_info_docente FOREIGN KEY (id_docente) REFERENCES Docente(id_docente) ON DELETE CASCADE
);
COMMENT ON TABLE InfoAcademicaDocente IS 'Información académica y estudios de los docentes.';

CREATE TABLE Asignatura (
    id_asignatura NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    codigo_asignatura VARCHAR2(20) NOT NULL UNIQUE,
    nombre VARCHAR2(100) NOT NULL,
    creditos NUMBER NOT NULL,
    horas_semanales NUMBER NOT NULL,
    id_tipo_asignatura NUMBER NOT NULL,
    CONSTRAINT fk_asignatura_tipo FOREIGN KEY (id_tipo_asignatura) REFERENCES TipoAsignatura(id_tipo_asignatura),
    CONSTRAINT chk_asignatura_creditos CHECK (creditos > 0),
    CONSTRAINT chk_asignatura_horas CHECK (horas_semanales > 0)
);
COMMENT ON TABLE Asignatura IS 'Catálogo de asignaturas de la universidad.';

CREATE TABLE Salon (
    id_salon NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(50) NOT NULL,
    capacidad NUMBER NOT NULL,
    id_sede NUMBER NOT NULL,
    CONSTRAINT fk_salon_sede FOREIGN KEY (id_sede) REFERENCES Sede(id_sede),
    CONSTRAINT uq_salon_nombre_sede UNIQUE (nombre, id_sede),
    CONSTRAINT chk_salon_capacidad CHECK (capacidad > 0)
);
COMMENT ON TABLE Salon IS 'Salones de clase y su capacidad.';

CREATE TABLE Grupo (
    id_grupo NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(20) NOT NULL,
    cupo_maximo NUMBER NOT NULL,
    id_asignatura NUMBER NOT NULL,
    id_periodo NUMBER NOT NULL,
    id_salon NUMBER NOT NULL,
    CONSTRAINT fk_grupo_asignatura FOREIGN KEY (id_asignatura) REFERENCES Asignatura(id_asignatura),
    CONSTRAINT fk_grupo_periodo FOREIGN KEY (id_periodo) REFERENCES Periodo(id_periodo),
    CONSTRAINT fk_grupo_salon FOREIGN KEY (id_salon) REFERENCES Salon(id_salon),
    CONSTRAINT uq_grupo_nombre UNIQUE (nombre, id_asignatura, id_periodo),
    CONSTRAINT chk_grupo_cupo CHECK (cupo_maximo > 0)
);
COMMENT ON TABLE Grupo IS 'Grupos específicos de una asignatura para un periodo.';

CREATE TABLE Matricula (
    id_matricula NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_estudiante NUMBER NOT NULL,
    id_periodo NUMBER NOT NULL,
    fecha_matricula DATE DEFAULT SYSDATE,
    CONSTRAINT fk_matricula_estudiante FOREIGN KEY (id_estudiante) REFERENCES Estudiante(id_estudiante),
    CONSTRAINT fk_matricula_periodo FOREIGN KEY (id_periodo) REFERENCES Periodo(id_periodo),
    CONSTRAINT uq_matricula_est_per UNIQUE (id_estudiante, id_periodo)
);
COMMENT ON TABLE Matricula IS 'Registro de una matrícula de un estudiante en un periodo.';

CREATE TABLE ItemEvaluacion (
    id_item_evaluacion NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_grupo NUMBER NOT NULL,
    nombre VARCHAR2(50) NOT NULL,
    porcentaje NUMBER(5, 2) NOT NULL,
    CONSTRAINT fk_item_eval_grupo FOREIGN KEY (id_grupo) REFERENCES Grupo(id_grupo) ON DELETE CASCADE,
    CONSTRAINT chk_item_eval_porcentaje CHECK (porcentaje > 0 AND porcentaje <= 100)
);
COMMENT ON TABLE ItemEvaluacion IS 'Ítems de evaluación para un grupo (parcial, taller, etc.).';

-- --- Tablas de Unión (Relaciones Muchos a Muchos) ---

CREATE TABLE Prerrequisito (
    id_asignatura_origen NUMBER NOT NULL,
    id_asignatura_prerreq NUMBER NOT NULL,
    PRIMARY KEY (id_asignatura_origen, id_asignatura_prerreq),
    CONSTRAINT fk_prereq_origen FOREIGN KEY (id_asignatura_origen) REFERENCES Asignatura(id_asignatura) ON DELETE CASCADE,
    CONSTRAINT fk_prereq_prerreq FOREIGN KEY (id_asignatura_prerreq) REFERENCES Asignatura(id_asignatura) ON DELETE CASCADE,
    CONSTRAINT chk_prereq_diferentes CHECK (id_asignatura_origen <> id_asignatura_prerreq)
);
COMMENT ON TABLE Prerrequisito IS 'Define los prerrequisitos entre asignaturas.';

CREATE TABLE Grupo_Docente (
    id_grupo NUMBER NOT NULL,
    id_docente NUMBER NOT NULL,
    PRIMARY KEY (id_grupo, id_docente),
    CONSTRAINT fk_grupodoc_grupo FOREIGN KEY (id_grupo) REFERENCES Grupo(id_grupo) ON DELETE CASCADE,
    CONSTRAINT fk_grupodoc_docente FOREIGN KEY (id_docente) REFERENCES Docente(id_docente)
);
COMMENT ON TABLE Grupo_Docente IS 'Asigna docentes a los grupos.';

CREATE TABLE Grupo_Horario (
    id_grupo NUMBER NOT NULL,
    id_horario NUMBER NOT NULL,
    PRIMARY KEY (id_grupo, id_horario),
    CONSTRAINT fk_grupohor_grupo FOREIGN KEY (id_grupo) REFERENCES Grupo(id_grupo) ON DELETE CASCADE,
    CONSTRAINT fk_grupohor_horario FOREIGN KEY (id_horario) REFERENCES Horario(id_horario)
);
COMMENT ON TABLE Grupo_Horario IS 'Asigna horarios a los grupos.';

CREATE TABLE Matricula_Asignatura (
    id_matricula_asignatura NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_matricula NUMBER NOT NULL,
    id_grupo NUMBER NOT NULL,
    nota_definitiva NUMBER(3, 2),
    estado VARCHAR2(20) DEFAULT 'INSCRITO' NOT NULL,
    CONSTRAINT fk_matrasig_matricula FOREIGN KEY (id_matricula) REFERENCES Matricula(id_matricula) ON DELETE CASCADE,
    CONSTRAINT fk_matrasig_grupo FOREIGN KEY (id_grupo) REFERENCES Grupo(id_grupo),
    CONSTRAINT uq_matrasig_mat_grup UNIQUE (id_matricula, id_grupo),
    CONSTRAINT chk_matrasig_estado CHECK (estado IN ('INSCRITO', 'APROBADO', 'REPROBADO', 'CANCELADO'))
);
COMMENT ON TABLE Matricula_Asignatura IS 'Asignaturas inscritas por un estudiante en una matrícula.';

CREATE TABLE Calificacion (
    id_calificacion NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_matricula_asignatura NUMBER NOT NULL,
    id_item_evaluacion NUMBER NOT NULL,
    nota NUMBER(3, 2) NOT NULL,
    CONSTRAINT fk_calif_matrasig FOREIGN KEY (id_matricula_asignatura) REFERENCES Matricula_Asignatura(id_matricula_asignatura) ON DELETE CASCADE,
    CONSTRAINT fk_calif_itemeval FOREIGN KEY (id_item_evaluacion) REFERENCES ItemEvaluacion(id_item_evaluacion),
    CONSTRAINT uq_calif_mat_item UNIQUE (id_matricula_asignatura, id_item_evaluacion),
    CONSTRAINT chk_calif_nota CHECK (nota BETWEEN 0.0 AND 5.0)
);
COMMENT ON TABLE Calificacion IS 'Notas parciales de un estudiante para un ítem de evaluación.';

CREATE TABLE Auditoria_Log (
    id_audit NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tabla_obj VARCHAR2(100) NOT NULL,
    pk_valor VARCHAR2(4000),
    operacion VARCHAR2(10) NOT NULL, -- INSERT, UPDATE, DELETE
    usuario VARCHAR2(100),
    detalles CLOB,
    fecha_operacion TIMESTAMP DEFAULT SYSTIMESTAMP
);
COMMENT ON TABLE Auditoria_Log IS 'Registro de operaciones críticas para auditoría.';

CREATE TABLE CierreNotas (
    id_cierre NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_periodo NUMBER NOT NULL,
    id_grupo NUMBER NOT NULL,
    cerrado_por VARCHAR2(100) NOT NULL,
    fecha_cierre TIMESTAMP DEFAULT SYSTIMESTAMP,
    motivo VARCHAR2(400),
    abierto BOOLEAN DEFAULT 1,
    CONSTRAINT fk_cierre_periodo FOREIGN KEY (id_periodo) REFERENCES Periodo(id_periodo),
    CONSTRAINT fk_cierre_grupo FOREIGN KEY (id_grupo) REFERENCES Grupo(id_grupo)
);
COMMENT ON TABLE CierreNotas IS 'Control de cierres de notas por periodo y grupo.';

-- Índices recomendados
CREATE INDEX idx_estudiante_programa ON Estudiante(id_programa) TABLESPACE INDEX_TS;
CREATE INDEX idx_estudiante_sede ON Estudiante(id_sede) TABLESPACE INDEX_TS;
CREATE INDEX idx_matricula_estudiante_periodo ON Matricula(id_estudiante, id_periodo) TABLESPACE INDEX_TS;
CREATE INDEX idx_matrasig_mat_grup ON Matricula_Asignatura(id_matricula, id_grupo) TABLESPACE INDEX_TS;
CREATE INDEX idx_calificacion_matitem ON Calificacion(id_matricula_asignatura, id_item_evaluacion) TABLESPACE INDEX_TS;

-- =====================================================================
-- Fin del Script
-- =====================================================================
